//using SummerBoot.Repository.Generator.Dto;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using SummerBoot.Repository.Core;
//using System.Data.Common;
//using System.Data;
//using Simple.Utils.Extensions;

//namespace SummerBoot.Repository.Generator.Dialect.Oracle
//{
//    public class OracleDatabaseInfo : IDatabaseInfo
//    {
//        private readonly IDbConnection dbConnection;

//        public OracleDatabaseInfo(IDbConnection dbConnection)
//        {
//            this.dbConnection = dbConnection;
//        }

//        public override GenerateDatabaseSqlResult CreateTable(DatabaseTableInfoDto tableInfo)
//        {
//            var tableName = tableInfo.Name;
//            var schemaTableName = GetSchemaTableName(tableInfo.Schema, tableName);

//            var fieldInfos = tableInfo.FieldInfos;

//            var body = new StringBuilder();
//            body.AppendLine($"CREATE TABLE {schemaTableName} (");
//            //主键
//            var keyField = "";
//            var hasKeyField = fieldInfos.Any(it => it.IsKey);
//            //数据库注释
//            var databaseDescriptions = new List<string>();
//            if (!string.IsNullOrEmpty(tableInfo.Description))
//            {
//                var tableDescriptionSql = CreateTableDescription(tableInfo.Schema, tableName, tableInfo.Description);
//                databaseDescriptions.Add(tableDescriptionSql);
//            }

//            for (int i = 0; i < fieldInfos.Count; i++)
//            {
//                var fieldInfo = fieldInfos[i];

//                //行末尾是否有逗号
//                var lastComma = "";
//                if (i != fieldInfos.Count - 1)
//                {
//                    lastComma = ",";
//                }
//                else
//                {
//                    lastComma = hasKeyField ? "," : "";
//                }

//                body.AppendLine($"    {GetCreateFieldSqlByFieldInfo(fieldInfo, false)}{lastComma}");
//                if (fieldInfo.IsKey)
//                {
//                    keyField = fieldInfo.ColumnName;
//                }

//                //添加行注释
//                if (!string.IsNullOrEmpty(fieldInfo.Description))
//                {
//                    var tableFieldDescription = CreateTableFieldDescription(tableInfo.Schema, tableName, fieldInfo);
//                    databaseDescriptions.Add(tableFieldDescription);
//                }
//            }

//            if (!string.IsNullOrEmpty(keyField))
//            {
//                body.AppendLine($"    CONSTRAINT \"PK_{tableName}\" PRIMARY KEY (\"{keyField}\")");
//            }

//            body.AppendLine($")");

//            var result = new GenerateDatabaseSqlResult()
//            {
//                Body = body.ToString(),
//                Descriptions = databaseDescriptions,
//                FieldModifySqls = new List<string>()
//            };

//            return result;
//        }

//        /// <summary>
//        /// 通过字段信息生成生成表的sql
//        /// </summary>
//        /// <param name="fieldInfo"></param>
//        /// <returns></returns>
//        private string GetCreateFieldSqlByFieldInfo(DatabaseFieldInfoDto fieldInfo, bool isAlter)
//        {
//            var identityString = fieldInfo.IsAutoCreate ? "GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE" : "";
//            var nullableString = fieldInfo.IsNullable ? "" : "NOT NULL";
//            var columnDataType = fieldInfo.ColumnDataType;
//            var defaultString = fieldInfo.ColumnType.IsNumberType() && !fieldInfo.IsNullable && isAlter && !fieldInfo.IsKey ? "DEFAULT 0" : "";

//            //string类型默认长度2000，也可自定义
//            if (fieldInfo.ColumnDataType == "NVARCHAR2")
//            {
//                columnDataType = fieldInfo.StringMaxLength.HasValue && fieldInfo.StringMaxLength.Value != -1
//                    ? $"NVARCHAR2({fieldInfo.StringMaxLength.Value})"
//                    : $"NVARCHAR2(2000)";
//            }
//            //自定义NUMBER精度类型
//            if (fieldInfo.ColumnDataType == "NUMBER")
//            {
//                var precision = fieldInfo.Precision;
//                var scale = fieldInfo.Scale;

//                if (fieldInfo.ColumnType.GetUnderlyingType() == typeof(int))
//                {
//                    precision = 10;
//                    scale = 0;
//                }

//                if (fieldInfo.ColumnType.GetUnderlyingType() == typeof(long))
//                {
//                    precision = 19;
//                    scale = 0;
//                }
//                if (fieldInfo.ColumnType.GetUnderlyingType() == typeof(bool))
//                {
//                    precision = 1;
//                    scale = 0;
//                }
//                if (fieldInfo.ColumnType.GetUnderlyingType() == typeof(short))
//                {
//                    precision = 5;
//                    scale = 0;
//                }
//                if (fieldInfo.ColumnType.GetUnderlyingType() == typeof(byte))
//                {
//                    precision = 3;
//                    scale = 0;
//                }
//                columnDataType =
//                    $"NUMBER({precision},{scale})";
//            }
//            //guid类型，默认16位
//            if (fieldInfo.ColumnDataType == "RAW")
//            {
//                columnDataType = $"RAW(16)";
//            }
//            //datetime类型，默认7位
//            if (fieldInfo.ColumnDataType == "TIMESTAMP")
//            {
//                columnDataType = $"TIMESTAMP(7)";
//            }

//            if (fieldInfo.SpecifiedColumnDataType.HasText())
//            {
//                columnDataType = fieldInfo.SpecifiedColumnDataType;
//            }

//            var columnName = BoxColumnName(fieldInfo.ColumnName);
//            var result = $"{columnName} {columnDataType}";
//            if (!string.IsNullOrEmpty(defaultString))
//            {
//                result += $" {defaultString}";
//            }

//            if (!string.IsNullOrEmpty(identityString))
//            {
//                result += $" {identityString}";
//            }
//            if (!string.IsNullOrEmpty(nullableString))
//            {
//                result += $" {nullableString}";
//            }
//            return result;
//        }

//        public override string CreateTableDescription(string schema, string tableName, string description)
//        {
//            var schemaTableName = GetSchemaTableName(schema, tableName);
//            var sql =
//                $"COMMENT ON TABLE {schemaTableName} IS '{description}'";
//            return sql;
//        }

//        public override string UpdateTableDescription(string schema, string tableName, string description)
//        {
//            var sql = CreateTableDescription(schema, tableName, description);
//            return sql;
//        }

//        public override string CreateTableField(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
//        {
//            var schemaTableName = GetSchemaTableName(schema, tableName);
//            var sql = $"ALTER TABLE {schemaTableName} ADD {GetCreateFieldSqlByFieldInfo(fieldInfo, true)}";
//            return sql;
//        }

//        public override string CreateTableFieldDescription(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
//        {
//            var schemaTableName = GetSchemaTableName(schema, tableName);
//            var columnName = BoxColumnName(fieldInfo.ColumnName);
//            var sql =
//                $"COMMENT ON COLUMN {schemaTableName}.{columnName} IS '{fieldInfo.Description}'";
//            return sql;
//        }

//        public override string UpdateTableFieldDescription(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
//        {
//            return CreateTableFieldDescription(schema, tableName, fieldInfo);
//        }

//        public override DatabaseTableInfoDto GetTableInfoByName(string schema, string tableName)
//        {
//            schema = GetDefaultSchema(schema);
//            var dbConnection = dbFactory.GetDbConnection();
//            var sql = @"   select c.*,d.comments Description from (select a.column_name AS ColumnName , a.data_type AS ColumnDataType,a.DATA_PRECISION AS Precision,a.DATA_SCALE AS Scale,  a.data_length ,CASE when a.nullable='Y' THEN 1 ELSE 0 end as IsNullable,CASE when  b.column_name is not null then 1 else 0 END IsKey  from all_tab_columns a left join
//                (select cu.* from all_cons_columns cu, all_constraints au where cu.constraint_name = au.constraint_name and au.constraint_type = 'P' and au.Table_Name=:tableName and au.owner=:schemaName  and cu.Table_Name=:tableName and cu.owner=:schemaName) b on
//                b.table_name = a.Table_Name and a.column_name = b.column_name where a.Table_Name=:tableName and a.owner=:schemaName ORDER BY a.column_id) c left join all_col_comments d on c.ColumnName = d.column_name  and d.owner=:schemaName  where d.table_name =:tableName
//                ";
//            var fieldInfos = dbConnection.Query<DatabaseFieldInfoDto>(databaseUnit, sql, new { tableName, schemaName = schema }).ToList();

//            var tableDescriptionSql = @"	SELECT comments FROM all_tab_comments WHERE table_name =:tableName AND TABLE_TYPE ='TABLE' and owner=:schemaName";

//            var tableDescription = dbConnection.QueryFirstOrDefault<string>(databaseUnit, tableDescriptionSql, new { tableName, schemaName = schema });

//            var result = new DatabaseTableInfoDto()
//            {
//                Name = tableName,
//                Description = tableDescription,
//                FieldInfos = fieldInfos
//            };

//            return result;
//        }

//        public override string GetSchemaTableName(string schema, string tableName)
//        {
//            tableName = BoxTableName(tableName);
//            tableName = !string.IsNullOrEmpty(schema) ? schema + "." + tableName : tableName;
//            return tableName;
//        }

//        public override string CreatePrimaryKey(string schema, string tableName, DatabaseFieldInfoDto fieldInfo)
//        {
//            var schemaTableName = GetSchemaTableName(schema, tableName);
//            var sql =
//                $"ALTER TABLE {schemaTableName} ADD CONSTRAINT {tableName}_PK PRIMARY KEY({fieldInfo.ColumnName}) ENABLE";

//            return sql;
//        }

//        public override string GetDefaultSchema(string schema)
//        {
//            if (!string.IsNullOrEmpty(schema))
//            {
//                return schema;
//            }

//            var result = dbConnection.QueryFirstOrDefault<string>(databaseUnit, "select USERNAME  from user_users");
//            return result;
//        }

//        public override List<string> GetAllTableNames()
//        {
//            var sql = @"SELECT TABLE_NAME  FROM USER_TABLES";

//            var tableNames = dbConnection.Query<string>(sql).ToList();
//            return tableNames;
//        }
//    }
//}

//using System;
//using System.Collections.Generic;
//using SummerBoot.Core;
//using SummerBoot.Repository.Generator.Dto;

//namespace SummerBoot.Repository.Generator.Dialect.Oracle
//{
//    public class OracleDatabaseFieldMapping : IDatabaseFieldMapping
//    {
//        private Dictionary<string, string> csharpTypeToDatabaseTypeMappings = new Dictionary<string, string>()
//        {
//            {"String","NVARCHAR2"},
//            {"Int32","NUMBER"},//int 10,0
//            {"Int64","NUMBER"},//long 19,0
//            {"DateTime","TIMESTAMP"},//7
//            {"Decimal","NUMBER"},//18,2
//            {"Boolean","NUMBER"},//1,0
//            {"Byte[]","binary"},
//            {"Double","BINARY_DOUBLE"},
//            {"Int16","NUMBER"},//5,0
//            {"TimeSpan","INTERVAL DAY(8) TO SECOND(7)"},//INTERVAL DAY (8) TO SECOND (7)
//            {"Guid","RAW"},//16
//            {"Byte","NUMBER"},//3,0
//            {"Single","BINARY_FLOAT"},
//        };

//        public List<string> ConvertCsharpTypeToDatabaseType(List<string> csharpTypeList)
//        {
//            short a;
//            var result = new List<string>();
//            foreach (var type in csharpTypeList)
//            {
//                var item = csharpTypeToDatabaseTypeMappings[type];
//                result.Add(item);
//            }

//            return result;
//        }

//        public List<string> ConvertDatabaseTypeToCsharpType(List<DatabaseFieldInfoDto> databaseFieldInfoList)
//        {
//            var result = new List<string>();
//            foreach (var fieldInfo in databaseFieldInfoList)
//            {
//                var item = "";
//                //自定义NUMBER精度类型
//                if (fieldInfo.ColumnDataType == "NUMBER")
//                {
//                    item = "decimal";
//                    var precision = fieldInfo.Precision;
//                    var scale = fieldInfo.Scale;

//                    if (scale == 0)
//                    {
//                        if (precision >= 6 && precision <= 10)
//                        {
//                            item = "int";
//                        }

//                        if (precision >= 11 && precision <= 19)
//                        {
//                            item = "long";
//                        }

//                        if (precision == 1)
//                        {
//                            item = "bool";
//                        }

//                        if (precision == 5)
//                        {
//                            item = "short";

//                        }

//                        if (precision >= 2 && precision <= 4)
//                        {
//                            item = "byte";
//                        }
//                        if (precision > 19)
//                        {
//                            item = "decimal";
//                        }
//                    }

//                    if (precision > 0 && scale > 0)
//                    {
//                        item = "decimal";
//                    }
//                }
//                //guid类型，默认16位
//                if (fieldInfo.ColumnDataType == "RAW")
//                {
//                    item = $"Guid";
//                }
//                //datetime类型，默认7位
//                if (fieldInfo.ColumnDataType == "TIMESTAMP(7)"|| fieldInfo.ColumnDataType == "DATE")
//                {
//                    item = $"DateTime";
//                }
//                if (fieldInfo.ColumnDataType == "TIMESTAMP(7) WITH TIME ZONE")
//                {
//                    item = $"DateTimeOffset";
//                }

//                //datetime类型，默认7位
//                if (fieldInfo.ColumnDataType == "INTERVAL DAY(8) TO SECOND(7)")
//                {
//                    item = $"TimeSpan";
//                }
//                //double
//                if (fieldInfo.ColumnDataType == "BINARY_DOUBLE")
//                {
//                    item = $"double";
//                }
//                //float
//                if (fieldInfo.ColumnDataType == "BINARY_FLOAT")
//                {
//                    item = $"float";
//                }

//                if (fieldInfo.ColumnDataType.Contains("CHAR")|| fieldInfo.ColumnDataType == "JSON"
//                                                             || fieldInfo.ColumnDataType == "CLOB" || fieldInfo.ColumnDataType == "NCLOB"
//                                                             || fieldInfo.ColumnDataType == "XMLTYPE" || fieldInfo.ColumnDataType == "ROWID"
//                                                             || fieldInfo.ColumnDataType == "UROWID" || fieldInfo.ColumnDataType == "LONG")
//                {
//                    item = $"string";
//                }
//                if ( fieldInfo.ColumnDataType == "BLOB"
//                                                              || fieldInfo.ColumnDataType == "BFILE" || fieldInfo.ColumnDataType == "LONG RAW"
//                                                             )
//                {
//                    item = $"byte[]";
//                }

//                result.Add(item);
//            }

//            return result;
//        }
//    }
//}